// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BankAccountNumberFinder.BDD
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class BankAccountNumberFinderFeature : Xunit.IClassFixture<BankAccountNumberFinderFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "BankAccountNumberFinder.feature"
#line hidden
        
        public BankAccountNumberFinderFeature(BankAccountNumberFinderFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BankAccountNumberFinder", "\tIn order to gain time\r\n\tAs a bank\r\n\tI want to scan letters & faxes to get bank a" +
                    "ccount numbers", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.TheoryAttribute(DisplayName="When I read a file I want to get the account numbers")]
        [Xunit.TraitAttribute("FeatureTitle", "BankAccountNumberFinder")]
        [Xunit.TraitAttribute("Description", "When I read a file I want to get the account numbers")]
        [Xunit.InlineDataAttribute("C:\\Users\\DUPINV\\Desktop\\Example55.txt", "5", new string[0])]
        [Xunit.InlineDataAttribute("C:\\Users\\DUPINV\\Desktop\\Example66.txt", "5", new string[0])]
        public virtual void WhenIReadAFileIWantToGetTheAccountNumbers(string file, string numbers, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When I read a file I want to get the account numbers", null, exampleTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
 testRunner.When(string.Format("I read a text {0}", file), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 9
 testRunner.Then(string.Format("I want to get a list with the correct count of account {0}", numbers), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(DisplayName="When I target a specific account in my list, I want to see a readable number")]
        [Xunit.TraitAttribute("FeatureTitle", "BankAccountNumberFinder")]
        [Xunit.TraitAttribute("Description", "When I target a specific account in my list, I want to see a readable number")]
        [Xunit.InlineDataAttribute("C:\\Users\\DUPINV\\Desktop\\Example55.txt", "1", "\"729466750 ERR\"", new string[0])]
        [Xunit.InlineDataAttribute("C:\\Users\\DUPINV\\Desktop\\Example55.txt", "4", "\"55?7?312? ILL\"", new string[0])]
        [Xunit.InlineDataAttribute("C:\\Users\\DUPINV\\Desktop\\Example55.txt", "4", "\"55?7?312? ILL\"", new string[0])]
        [Xunit.InlineDataAttribute("C:\\Users\\DUPINV\\Desktop\\Example66.txt", "0", "\"123456789\"", new string[0])]
        public virtual void WhenITargetASpecificAccountInMyListIWantToSeeAReadableNumber(string file, string index, string account, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When I target a specific account in my list, I want to see a readable number", null, exampleTags);
#line 15
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 16
 testRunner.When(string.Format("I read a text {0}", file), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 17
 testRunner.And(string.Format("I target an account by its {0}", index), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 18
 testRunner.Then(string.Format("I want to get a normalized {0}", account), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                BankAccountNumberFinderFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                BankAccountNumberFinderFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
